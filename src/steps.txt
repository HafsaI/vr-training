Steps

- npm install firebase
- firebase config add 
- better to add env file as api keys shouldnt be public
- whenever we are making api call, we want asynch wait, 
- promise data needs to be resolved


firebase db
- collection like table and document like entries/rows 



user: example3@gmail.com
password: hello1




// getSpeechScoresById(speechid).then((value) => console.log(value))
// {users.map((user) => {
//   return (
  
//   <div> 
//    <p> Name: {user.username}</p>
//    <p> User ID: {user.id}</p>
  
//   </div>
//   )
// })} 



-- to get users
// const [users, setUsers] = useState([]);
// const usersCollectionRef = collection(db, "users");
// const getUsers = async () => {
//   const data = await getDocs(usersCollectionRef);
//   setUsers(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
// };
    // getUsers();




// onAuthStateChanged(auth, (currentUser) => {
//     setUser(currentUser);
//     console.log('currentuser2', currentUser);
    
// });

// const isLoggedIn = auth.currentUser ? true:false




// // saves video to db only when a video has stopped recording
  // useEffect(() => {
  //   return <SaveVideoToDB videoFile={video}/>
  //   // console.log("here2")
  // }, [video]); 














  
  cloud firestore func

  // exports.updateUser = functions.firestore
    // .document('training_sessions/{id6}')
    // .onUpdate((change, context) => {
    //   // Get an object representing the document
    //   // e.g. {'name': 'Marie', 'age': 66}
    //   const newValue = change.after.data();

    //   // ...or the previous value before this update
    //   const previousValue = change.before.data();

    //   // access a particular field as you would any JS property
    //   const sess = newValue.session;
    //   console.log("session", sess)

    //   // perform desired operations ...
    // });



// old history
// {userSession.map((session) => {
//   return ( 
//   session.user_id === user?.uid?
//   liveSession === false?
//   <Scores session = {session}/>
//   : null : null

//   )

// })}




//on signin removed
 let docRef = doc(db, "users", user?.uid);
            updateDoc(docRef,{
                isWebsiteLogin:true
            } ).then(response => {
                console.log("signinupdated")
            }).catch(error =>{
                console.log(error.message)
            })